class Solution { // O(n) time complexity but not efficient
    public int romanToInt(String s) {
        HashMap <Character, Integer> hmap = new HashMap<>();
        hmap.put('I',1);
        hmap.put('V',5);
        hmap.put('X',10);
        hmap.put('L',50);
        hmap.put('C',100);
        hmap.put('D',500);
        hmap.put('M',1000);
        
        int ans = 0;
        int i;
        for(i=0;i<s.length()-1;i++){//last
            if(hmap.get(s.charAt(i+1))>= hmap.get(s.charAt(i))){
                if(hmap.get(s.charAt(i+1)) == hmap.get(s.charAt(i))){
                    ans = ans + (hmap.get(s.charAt(i))*2);
                }
                else if(hmap.get(s.charAt(i+1)) > hmap.get(s.charAt(i))){
                    ans = ans + hmap.get(s.charAt(i+1)) - hmap.get(s.charAt(i));   
                }
                i++;
            }else{
                ans  = ans + hmap.get(s.charAt(i));
            }
        }
        while(i<s.length()){
            ans  = ans + hmap.get(s.charAt(i));
            i++;
        }
        System.out.println("ans: "+ans);
        return ans;
        
    }
}